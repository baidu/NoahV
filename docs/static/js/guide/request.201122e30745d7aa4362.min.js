webpackJsonp([43],{2119:function(e,v,_){e.exports=_(2497)},2497:function(e,v,_){"use strict";Object.defineProperty(v,"__esModule",{value:!0});var o=_(2498),t=_(5),r=Object(t.a)(null,o.a,o.b,!1,null,null,null);v.default=r.exports},2498:function(e,v,_){"use strict";_.d(v,"a",function(){return o}),_.d(v,"b",function(){return t});var o=function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("saas-doc",[_("h2",[e._v("概述")]),e._v(" "),_("p",[e._v("上一章我们介绍了NoahV统一的接口规范，本章我们介绍NoahV统一的数据请求工具NohaV-request。")]),e._v(" "),_("p",[e._v("NohaV-request是基于Axios请求工具来扩展的，Axios是Vue.js作者尤雨溪推荐在Vue.js项目中使用的数据请求库，Axios本质上也是对原生XHR的封装，只不过它是Promise的实现版本，符合最新的ES规范。")]),e._v(" "),_("p",[e._v("NohaV-request在Axios的基础上做了如下处理：")]),e._v(" "),_("ul",[_("li",[e._v("1.统一的接口错误处理")]),e._v(" "),_("li",[e._v("2.全局的加载提示")]),e._v(" "),_("li",[e._v("3.支持restful风格接口定义")]),e._v(" "),_("li",[e._v("4.支持请求各个阶段的hook")])]),e._v(" "),_("h2",[e._v("如何使用")]),e._v(" "),_("p",[e._v("NoahV-request的数据请求对象"),_("code",{pre:!0},[e._v("$request")]),e._v("已经绑定到了Vue实例上，所以在Vue实例的生命周期内都可以通过"),_("code",{pre:!0},[e._v("this.$request")]),e._v("来调用数据请求方法。")]),e._v(" "),_("p",[e._v("数据请求方法支持的常见参数如下：")]),e._v(" "),_("table",[_("thead",[_("tr",[_("th",[e._v("属性")]),e._v(" "),_("th",[e._v("说明")]),e._v(" "),_("th",[e._v("类型")]),e._v(" "),_("th",[e._v("默认值")])])]),e._v(" "),_("tbody",[_("tr",[_("td",[e._v("url")]),e._v(" "),_("td",[e._v("目标URL")]),e._v(" "),_("td",[e._v("string")]),e._v(" "),_("td",[e._v("''")])]),e._v(" "),_("tr",[_("td",[e._v("method")]),e._v(" "),_("td",[e._v("请求方法")]),e._v(" "),_("td",[e._v("string")]),e._v(" "),_("td",[e._v("'get'")])]),e._v(" "),_("tr",[_("td",[e._v("data")]),e._v(" "),_("td",[e._v("请求参数，仅仅适用于"),_("code",{pre:!0},[e._v("PUT")]),e._v("、 "),_("code",{pre:!0},[e._v("POST")]),e._v("、"),_("code",{pre:!0},[e._v("PATCH")]),e._v("，GET方法请使用params")]),e._v(" "),_("td",[e._v("object")]),e._v(" "),_("td",[e._v("-")])]),e._v(" "),_("tr",[_("td",[e._v("params")]),e._v(" "),_("td",[e._v("请求URL参数")]),e._v(" "),_("td",[e._v("object")]),e._v(" "),_("td",[e._v("''")])]),e._v(" "),_("tr",[_("td",[e._v("showLoading")]),e._v(" "),_("td",[e._v("是否展示全局Loading")]),e._v(" "),_("td",[e._v("boolean")]),e._v(" "),_("td",[e._v("true")])]),e._v(" "),_("tr",[_("td",[e._v("pathArgs")]),e._v(" "),_("td",[e._v("用于替换restful风格接口中的变量")]),e._v(" "),_("td",[e._v("object")]),e._v(" "),_("td",[e._v("-")])])])]),e._v(" "),_("p",[e._v("除上述参数外，还支持其他的一些额外参数，请参考"),_("a",{attrs:{href:"https://github.com/axios/axios#request-config"}},[e._v("Axios文档")]),e._v("。")]),e._v(" "),_("h3",[e._v("使用示例")]),e._v(" "),_("div",{staticClass:"normal-code"},[_("pre",{pre:!0},[_("code",{pre:!0,attrs:{"v-pre":""}},[e._v("this.$request({\n    url: '/api/test',\n    method: 'post',\n    data: {\n        dev: true\n    },\n    showLoading: true\n}).then(function(data) {\n    // do with data\n})\n")])])]),e._v(" "),_("h2",[e._v("NoahV-request工具功能")]),e._v(" "),_("h3",[e._v("1.统一的接口错误处理")]),e._v(" "),_("p",[e._v("NohaV-request会为每一个请求匹配默认的接口返回处理程序，如果接口返回非200状态码，会自动全局弹出错误提示，如果希望自定义错误处理，请参考"),_("code",{pre:!0},[e._v("beforeFailure")]),e._v("相关hook。")]),e._v(" "),_("h3",[e._v("2.全局的加载提示")]),e._v(" "),_("p",[e._v("默认情况下，每个接口都会触发覆盖全屏幕的加载提示，如果不希望有,可以在接口请求配置中设置"),_("code",{pre:!0},[e._v("showLoading")]),e._v("为"),_("code",{pre:!0},[e._v("false")]),e._v(",如果希望所有接口都不默认触发加载提示，请参考"),_("code",{pre:!0},[e._v("showGlobalLoading")]),e._v("、"),_("code",{pre:!0},[e._v("hideGlobalLoading")]),e._v("相关hook。")]),e._v(" "),_("h3",[e._v("3.支持Restful风格接口定义")]),e._v(" "),_("p",[e._v("如果接口中含有大括号包含的变量，NohaV-request会在接口请求之前进行变量替换，如"),_("code",{pre:!0},[e._v("{name}")]),e._v(",替换的真实值来自于"),_("code",{pre:!0},[e._v("pathArgs")]),e._v("、"),_("code",{pre:!0},[e._v("params")]),e._v("、"),_("code",{pre:!0},[e._v("data")]),e._v("，优先使用"),_("code",{pre:!0},[e._v("pathArgs")]),e._v(",也建议需要替换的时候提供"),_("code",{pre:!0},[e._v("pathArgs")]),e._v("，避免和请求参数混淆。\n也可以自定义Restful处理规则，请参考"),_("code",{pre:!0},[e._v("handlerRestfulUrl")]),e._v("相关hook。")]),e._v(" "),_("h3",[e._v("4.支持hooks介绍")]),e._v(" "),_("p",[e._v("在项目根目录"),_("code",{pre:!0},[e._v("src/common/hook/")]),e._v("下有一个"),_("code",{pre:!0},[e._v("ajax.js")]),e._v("文件，请在该文件中添加hook。示例如下，记得检查"),_("code",{pre:!0},[e._v("src/common/hook/ajax.js")]),e._v("文件是否在"),_("code",{pre:!0},[e._v("src/main.js")]),e._v("中import，如果没有，请手动添加下"),_("code",{pre:!0},[e._v("import 'src/common/hook/ajax'")]),e._v("。")]),e._v(" "),_("div",{staticClass:"normal-code"},[_("pre",{pre:!0},[_("code",{pre:!0,attrs:{"v-pre":""}},[e._v("import request from 'noahv-request';\nrequest.hooks.beforeRequest = function (config) {\n    config.headers['Content-Type'] = 'application/x-www-form-urlencoded'\n    return config;\n}\n")])])]),e._v(" "),_("p",[e._v("支持hooks信息如下")]),e._v(" "),_("ul",[_("li",[e._v("1.beforeRequest （在请求发出前触发，参数为当前的config,如需对config做变换处理，请将处理之后的数据return）")]),e._v(" "),_("li",[e._v("2.beforeSuccess（在请求回来后触发，参数为当前的response,如需对response做变换处理，请将处理之后的数据return）")]),e._v(" "),_("li",[e._v("3.beforeFailure（在请求失败后触发，参数为error信息，如果希望默认的错误弹出不出现，请将"),_("code",{pre:!0},[e._v("error.isSilent")]),e._v("的值设置为true）")]),e._v(" "),_("li",[e._v("4.beforeResponse（在请求成功后，即将调用回调函数前触发，参数为response信息，如需对response做变换处理，请将处理之后的数据return）")]),e._v(" "),_("li",[e._v("5.beforeAdapter（在请求参数处理阶段触发，具体请参考Axios的adapter方法）")]),e._v(" "),_("li",[e._v("6.showGlobalLoading（在请求发出前触发）")]),e._v(" "),_("li",[e._v("7.hideGlobalLoading（在请求回来后触发）")]),e._v(" "),_("li",[e._v("8.handlerRestfulUrl（在请求参数处理阶段触发）")])])])},t=[]}});